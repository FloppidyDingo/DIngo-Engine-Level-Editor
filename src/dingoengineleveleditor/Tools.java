/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dingoengineleveleditor;

import Managers.CodeManager;
import objects.Light;
import java.awt.Image;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import objects.Entity;
import objects.Node;
import objects.Tile;
import objects.Trigger;

/**
 *
 * @author James
 */
public class Tools extends javax.swing.JFrame {
    private Tile activeTile;
    private final Editor editor;
    private int uiMode;
    private boolean updateDisabled;

    /**
     * Creates new form Tools
     * @param editor
     */
    public Tools(Editor editor) {
        this.editor = editor;
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tools.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        initComponents();
        
        txtID.getDocument().addDocumentListener(new DocumentListener() {
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateObjects();
            }
                
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateObjects();
            }
                
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateObjects();
            }
        });
        
        txtCustomTag.getDocument().addDocumentListener(new DocumentListener() {
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateObjects();
            }
                
            @Override
            public void removeUpdate(DocumentEvent e) {
                updateObjects();
            }
                
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateObjects();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imgPreview = new javax.swing.JLabel();
        cmbTilesheet = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        spnTile = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        btnAddTile = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        btnMove = new javax.swing.JButton();
        btnErase = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        chkSolid = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        spnMass = new javax.swing.JSpinner();
        chkVisible = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        spnOpacity = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        spnCGroup = new javax.swing.JSpinner();
        chkInvertX = new javax.swing.JCheckBox();
        chkInvertY = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        spnHeight = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        spnWidth = new javax.swing.JSpinner();
        chkAmbient = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        spnRed = new javax.swing.JSpinner();
        spnGreen = new javax.swing.JSpinner();
        spnBlue = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        spnRadius = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        spnBrightness = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        btnAddLight = new javax.swing.JButton();
        btnAddTrigger = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCode = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        txtCustomTag = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnNew = new javax.swing.JMenuItem();
        btnOpen = new javax.swing.JMenuItem();
        btnSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        btnProject = new javax.swing.JMenuItem();
        btnExport = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        btnImport = new javax.swing.JMenuItem();
        btnDelete = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        imgPreview.setBackground(new java.awt.Color(0, 0, 0));

        cmbTilesheet.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTilesheetItemStateChanged(evt);
            }
        });

        jLabel2.setText("Frame:");

        spnTile.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spnTile.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnTileStateChanged(evt);
            }
        });

        btnAddTile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/tileadd.png"))); // NOI18N
        btnAddTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTileActionPerformed(evt);
            }
        });

        btnSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/select.png"))); // NOI18N
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        btnMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/move.png"))); // NOI18N
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });

        btnErase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/erase.png"))); // NOI18N
        btnErase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraseActionPerformed(evt);
            }
        });

        jLabel1.setText("ID:");

        chkSolid.setText("Solid?");
        chkSolid.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkSolidStateChanged(evt);
            }
        });

        jLabel4.setText("Mass:");

        spnMass.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 1.0f));
        spnMass.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMassStateChanged(evt);
            }
        });

        chkVisible.setSelected(true);
        chkVisible.setText("Visible?");
        chkVisible.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkVisibleStateChanged(evt);
            }
        });

        jLabel5.setText("Opacity:");

        spnOpacity.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        spnOpacity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnOpacityStateChanged(evt);
            }
        });

        jLabel6.setText("Collision Group:");

        spnCGroup.setModel(new javax.swing.SpinnerNumberModel());
        spnCGroup.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnCGroupStateChanged(evt);
            }
        });

        chkInvertX.setText("Invert X?");
        chkInvertX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkInvertXStateChanged(evt);
            }
        });

        chkInvertY.setText("Invert Y?");
        chkInvertY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkInvertYStateChanged(evt);
            }
        });

        jLabel7.setText("Height:");

        spnHeight.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnHeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnHeightStateChanged(evt);
            }
        });

        jLabel8.setText("Width:");

        spnWidth.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnWidth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnWidthStateChanged(evt);
            }
        });

        chkAmbient.setText("Ambient?");
        chkAmbient.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkAmbientStateChanged(evt);
            }
        });

        jLabel10.setText("Color:");

        jLabel11.setText("R");

        spnRed.setModel(new javax.swing.SpinnerNumberModel(255, 0, 255, 1));
        spnRed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnRedStateChanged(evt);
            }
        });

        spnGreen.setModel(new javax.swing.SpinnerNumberModel(255, 0, 255, 1));
        spnGreen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnGreenStateChanged(evt);
            }
        });

        spnBlue.setModel(new javax.swing.SpinnerNumberModel(255, 0, 255, 1));
        spnBlue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnBlueStateChanged(evt);
            }
        });

        jLabel9.setText("G");

        jLabel12.setText("B");

        jLabel13.setText("Radius:");

        spnRadius.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 1.0f));
        spnRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnRadiusStateChanged(evt);
            }
        });

        jLabel14.setText("Brightness:");

        spnBrightness.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        spnBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnBrightnessStateChanged(evt);
            }
        });

        jLabel15.setText("Generated code:");
        jLabel15.setToolTipText("The code that is generated for this group of objects. Only touch if you know what you are doing!");

        btnAddLight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/light.png"))); // NOI18N
        btnAddLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLightActionPerformed(evt);
            }
        });

        btnAddTrigger.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/trigger.png"))); // NOI18N
        btnAddTrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTriggerActionPerformed(evt);
            }
        });

        txtCode.setEditable(false);
        txtCode.setColumns(20);
        txtCode.setRows(5);
        jScrollPane1.setViewportView(txtCode);

        jLabel16.setText("Custom Tag:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator3)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(imgPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnTile)
                                .addGap(80, 80, 80))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbTilesheet, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtID))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddTile)
                                    .addComponent(btnSelect))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnMove)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnErase))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAddLight)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnAddTrigger)))
                                .addGap(0, 5, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkSolid)
                                    .addComponent(chkVisible))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnMass, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnOpacity))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(chkInvertX))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkInvertY)
                                    .addComponent(spnCGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(chkAmbient)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnRed, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spnGreen, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnBlue, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(txtCustomTag)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbTilesheet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(spnTile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(imgPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddTile)
                    .addComponent(btnAddLight)
                    .addComponent(btnAddTrigger))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMove)
                    .addComponent(btnErase)
                    .addComponent(btnSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkSolid)
                    .addComponent(jLabel4)
                    .addComponent(spnMass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkVisible)
                    .addComponent(jLabel5)
                    .addComponent(spnOpacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spnCGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkInvertX)
                    .addComponent(chkInvertY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(spnHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(spnWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkAmbient)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(spnRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(spnGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(spnBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(spnRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(spnBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCustomTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jMenu1.add(btnNew);

        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        jMenu1.add(btnOpen);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jMenu1.add(btnSave);
        jMenu1.add(jSeparator2);

        btnProject.setText("Project...");
        btnProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProjectActionPerformed(evt);
            }
        });
        jMenu1.add(btnProject);

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        jMenu1.add(btnExport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tile");

        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        jMenu2.add(btnImport);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jMenu2.add(btnDelete);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spnTileStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnTileStateChanged
        // TODO add your handling code here:
        selectSprite();
    }//GEN-LAST:event_spnTileStateChanged

    private void cmbTilesheetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTilesheetItemStateChanged
        // TODO add your handling code here:
        spnTile.getModel().setValue(0);
        selectSprite();
        SpinnerNumberModel model = new SpinnerNumberModel(0, 0, activeTile.skin.getSkins().size() - 1, 1);
        spnTile.setModel(model);
    }//GEN-LAST:event_cmbTilesheetItemStateChanged

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        btnSelect.setSelected(true);
        btnAddLight.setSelected(false);
        btnAddTile.setSelected(false);
        btnAddTrigger.setSelected(false);
        btnErase.setSelected(false);
        btnMove.setSelected(false);
        editor.setEditingMode(1);
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnAddTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTileActionPerformed
        // TODO add your handling code here:
        btnSelect.setSelected(false);
        btnAddLight.setSelected(false);
        btnAddTile.setSelected(true);
        btnAddTrigger.setSelected(false);
        btnErase.setSelected(false);
        btnMove.setSelected(false);
        editor.setEditingMode(0);
    }//GEN-LAST:event_btnAddTileActionPerformed

    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        // TODO add your handling code here:
        btnSelect.setSelected(false);
        btnAddLight.setSelected(false);
        btnAddTile.setSelected(false);
        btnAddTrigger.setSelected(false);
        btnErase.setSelected(false);
        btnMove.setSelected(true);
        editor.setEditingMode(2);
    }//GEN-LAST:event_btnMoveActionPerformed

    private void btnEraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseActionPerformed
        // TODO add your handling code here:
        btnSelect.setSelected(false);
        btnAddLight.setSelected(false);
        btnAddTile.setSelected(false);
        btnAddTrigger.setSelected(false);
        btnErase.setSelected(true);
        btnMove.setSelected(false);
        editor.setEditingMode(3);
    }//GEN-LAST:event_btnEraseActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // TODO add your handling code here:
        JFileChooser jfcInput = new JFileChooser();
        jfcInput.setCurrentDirectory(new File(editor.getActiveProject().getPath()));
        jfcInput.setFileFilter(new FileFilter() {

            @Override
            public String getDescription() {
                return "PNG Images (.png)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".png");
                }
            }

        });
        int fstatus = jfcInput.showOpenDialog(this);
        if(fstatus == JFileChooser.APPROVE_OPTION){
            String sourceFile = jfcInput.getSelectedFile().getPath();
            Tile tile = editor.generateTile(sourceFile, jfcInput.getSelectedFile().getName());
            if(tile == null){
                System.out.println("Tile generation failed");
                return;
            }
            
            editor.getTiles().add(tile);
            cmbTilesheet.addItem(tile.id);
            
            System.out.println("Tile created");
        }
        
        spnTile.getModel().setValue(0);
        selectSprite();
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        cmbTilesheet.removeAllItems();
        editor.getTiles().remove(activeTile);
        for (Tile tile : editor.getTiles()) {
            cmbTilesheet.addItem(tile.id);
        }
        
        imgPreview.setIcon(null);
        
        selectSprite();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        editor.getNewProject().setVisible(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser jfcInput = new JFileChooser();
        jfcInput.setFileFilter(new FileFilter() {

            @Override
            public String getDescription() {
                return "DE4 Map File (.d4m)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".d4m");
                }
            }

        });
        int fstatus = jfcInput.showOpenDialog(this);
        if(fstatus == JFileChooser.APPROVE_OPTION){
            editor.loadProject(jfcInput.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        editor.saveProject();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        editor.compileMap();
    }//GEN-LAST:event_btnExportActionPerformed

    private void chkSolidStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkSolidStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_chkSolidStateChanged

    private void spnMassStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnMassStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnMassStateChanged

    private void chkVisibleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkVisibleStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_chkVisibleStateChanged

    private void spnOpacityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnOpacityStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnOpacityStateChanged

    private void spnCGroupStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnCGroupStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnCGroupStateChanged

    private void chkInvertXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkInvertXStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_chkInvertXStateChanged

    private void chkInvertYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkInvertYStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_chkInvertYStateChanged

    private void spnHeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnHeightStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnHeightStateChanged

    private void spnWidthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnWidthStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnWidthStateChanged

    private void chkAmbientStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkAmbientStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_chkAmbientStateChanged

    private void spnRedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnRedStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnRedStateChanged

    private void spnGreenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnGreenStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnGreenStateChanged

    private void spnBlueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnBlueStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnBlueStateChanged

    private void spnRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnRadiusStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnRadiusStateChanged

    private void spnBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnBrightnessStateChanged
        // TODO add your handling code here:
        updateObjects();
    }//GEN-LAST:event_spnBrightnessStateChanged

    private void btnAddLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLightActionPerformed
        // TODO add your handling code here:
        btnSelect.setSelected(false);
        btnAddLight.setSelected(true);
        btnAddTile.setSelected(false);
        btnAddTrigger.setSelected(false);
        btnErase.setSelected(false);
        btnMove.setSelected(false);
        editor.setEditingMode(4);
    }//GEN-LAST:event_btnAddLightActionPerformed

    private void btnAddTriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTriggerActionPerformed
        // TODO add your handling code here:
        btnSelect.setSelected(false);
        btnAddLight.setSelected(false);
        btnAddTile.setSelected(false);
        btnAddTrigger.setSelected(true);
        btnErase.setSelected(false);
        btnMove.setSelected(false);
        editor.setEditingMode(5);
    }//GEN-LAST:event_btnAddTriggerActionPerformed

    private void btnProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProjectActionPerformed
        // TODO add your handling code here:
        editor.getProjectUI().setVisible(true);
    }//GEN-LAST:event_btnProjectActionPerformed

    private void selectSprite(){
        String targetTile = cmbTilesheet.getItemAt(cmbTilesheet.getSelectedIndex());
        for (Tile tile : editor.getTiles()) {
            if(tile.id == null ? targetTile == null : tile.id.equals(targetTile)){
                activeTile = tile;
                imgPreview.setIcon(new ImageIcon(tile.skin.getFrame((Integer)spnTile.getModel().getValue()).getScaledInstance(100, 100, Image.SCALE_REPLICATE)));
                editor.setEntitySkin(tile.skin, (Integer)spnTile.getModel().getValue());
                if(uiMode == 0){
                    txtID.setText("entDefault" + targetTile + (Integer)spnTile.getModel().getValue());
                }
            }
        }
        updateObjects();
    }
    
    public void updateObjects(){
        if(updateDisabled){
            return;
        }
        System.out.println("update");
        switch(uiMode){
            case 0:{
                //entity update
                Entity entity = editor.getActiveEntity();
                if (entity != null) {
                    System.out.println("Entity updated");
                    Entity dataEntity = (Entity) entity.getUserData();
                    entity.setID(txtID.getText());
                    entity.useSkin((Integer)spnTile.getModel().getValue());
                    dataEntity.setSolid(chkSolid.isSelected());
                    dataEntity.setMass((Float) spnMass.getModel().getValue());
                    dataEntity.setVisible(chkVisible.isSelected());
                    dataEntity.setOpacity((Float) spnOpacity.getModel().getValue());
                    dataEntity.setCollisionLayer((Integer) spnCGroup.getModel().getValue());
                    entity.setInvertX(chkInvertX.isSelected());
                    entity.setInvertY(chkInvertY.isSelected());
                    dataEntity.setInvertX(chkInvertX.isSelected());
                    dataEntity.setInvertY(chkInvertY.isSelected());
                    entity.setUserData(dataEntity);
                    editor.setActiveEntity(entity);
                    editor.getCodeManager().updateTag(entity);
                    editor.getCodeManager().setCustomTag(entity, txtCustomTag.getText());
                    txtCode.setText(editor.getCodeManager().getTag(editor.getActiveEntity()));
                }
                break;
            }
            case 1:{
                //light update
                Light light = editor.getActiveDataLight();
                if (light != null) {
                    System.out.println("Light updated");
                    light.setId(txtID.getText());
                    light.setAmbient(chkAmbient.isSelected());
                    light.setRed((Integer) spnRed.getModel().getValue());
                    light.setGreen((Integer) spnGreen.getModel().getValue());
                    light.setBlue((Integer) spnBlue.getModel().getValue());
                    light.setRadius((Float) spnRadius.getModel().getValue());
                    light.setBrightness((Float) spnBrightness.getModel().getValue());
                    editor.setActiveLight(light);
                    editor.getCodeManager().updateTag(editor.getActiveLight());
                    editor.getCodeManager().setCustomTag(editor.getActiveLight(), txtCustomTag.getText());
                    txtCode.setText(editor.getCodeManager().getTag(editor.getActiveLight()));
                }
                break;
            }
            case 2:{
                Trigger trigger = editor.getActiveDataTrigger();
                if(trigger != null){
                    System.out.println("Trigger updated");
                    trigger.setID(txtID.getText());
                    trigger.setHeight((Integer)spnHeight.getModel().getValue());
                    trigger.setWidth((Integer)spnWidth.getModel().getValue());
                    editor.setActiveTrigger(trigger);
                    editor.getCodeManager().updateTag(editor.getActiveTrigger());
                    editor.getCodeManager().setCustomTag(editor.getActiveTrigger(), txtCustomTag.getText());
                    txtCode.setText(editor.getCodeManager().getTag(editor.getActiveTrigger()));
                }
                break;
            }
        }
        
    }
    
    public void updateUI(Entity entity, Light light, Trigger trigger, CodeManager manager, Node baseNode){
        updateDisabled = true;
        
        txtCode.setText(manager.getTag(baseNode));
        txtCustomTag.setText(manager.getCustomTag(baseNode));
        
        switch(uiMode){
            case 0:{
                //entity update
                if(entity != null){
                    Entity dataEntity = (Entity) entity.getUserData();
                    txtID.setText(entity.getID());
                    chkSolid.setSelected(dataEntity.isSolid());
                    spnMass.getModel().setValue(dataEntity.getMass());
                    chkVisible.setSelected(dataEntity.isVisible());
                    spnOpacity.getModel().setValue(dataEntity.getOpacity());
                    spnCGroup.getModel().setValue(dataEntity.getCollisionLayer());
                    chkInvertX.setSelected(entity.isInvertX());
                    chkInvertY.setSelected(entity.isInvertY());
                    spnTile.getModel().setValue(entity.getFrame());
                }
                break;
            }
            case 1:{
                //light update
                if(light != null){
                    txtID.setText(light.getId());
                    chkAmbient.setSelected(light.isAmbient());
                    spnRed.getModel().setValue(light.getRed());
                    spnGreen.getModel().setValue(light.getGreen());
                    spnBlue.getModel().setValue(light.getBlue());
                    spnRadius.getModel().setValue(light.getRadius());
                    spnBrightness.getModel().setValue(light.getBrightness());
                }
                break;
            }
            case 2:{
                if(trigger != null){
                    //trigger update
                    txtID.setText(trigger.getID());
                    spnHeight.getModel().setValue(trigger.getHeight());
                    spnWidth.getModel().setValue(trigger.getWidth());
                }
                break;
            }
        }
        updateDisabled = false;
        
    }
    
    public void setUIMode(int mode){
        updateDisabled = true;
        uiMode = mode;
        
        chkSolid.setEnabled(false);
        spnMass.setEnabled(false);
        chkVisible.setEnabled(false);
        spnOpacity.setEnabled(false);
        spnCGroup.setEnabled(false);
        chkInvertX.setEnabled(false);
        chkInvertY.setEnabled(false);
        spnHeight.setEnabled(false);
        spnWidth.setEnabled(false);
        chkAmbient.setEnabled(false);
        spnRed.setEnabled(false);
        spnGreen.setEnabled(false);
        spnBlue.setEnabled(false);
        spnRadius.setEnabled(false);
        spnBrightness.setEnabled(false);
        
        switch(uiMode){
            case 0:{
                chkSolid.setEnabled(true);
                spnMass.setEnabled(true);
                chkVisible.setEnabled(true);
                spnOpacity.setEnabled(true);
                spnCGroup.setEnabled(true);
                chkInvertX.setEnabled(true);
                chkInvertY.setEnabled(true);
                break;
            }
            case 1:{
                chkAmbient.setEnabled(true);
                spnRed.setEnabled(true);
                spnGreen.setEnabled(true);
                spnBlue.setEnabled(true);
                spnRadius.setEnabled(true);
                spnBrightness.setEnabled(true);
                break;
            }
            case 2:{
                spnHeight.setEnabled(true);
                spnWidth.setEnabled(true);
                break;
            }
        }
        updateDisabled = false;
    }
    
    public void importTile(String path, String file){
        Tile tile = editor.generateTile(path, file);
        if (tile == null) {
            System.out.println("Tile generation failed");
            return;
        }

        editor.getTiles().add(tile);
        cmbTilesheet.addItem(tile.id);

        System.out.println("Tile created");

        spnTile.getModel().setValue(0);
        selectSprite();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLight;
    private javax.swing.JButton btnAddTile;
    private javax.swing.JButton btnAddTrigger;
    private javax.swing.JMenuItem btnDelete;
    private javax.swing.JButton btnErase;
    private javax.swing.JMenuItem btnExport;
    private javax.swing.JMenuItem btnImport;
    private javax.swing.JButton btnMove;
    private javax.swing.JMenuItem btnNew;
    private javax.swing.JMenuItem btnOpen;
    private javax.swing.JMenuItem btnProject;
    private javax.swing.JMenuItem btnSave;
    private javax.swing.JButton btnSelect;
    private javax.swing.JCheckBox chkAmbient;
    private javax.swing.JCheckBox chkInvertX;
    private javax.swing.JCheckBox chkInvertY;
    private javax.swing.JCheckBox chkSolid;
    private javax.swing.JCheckBox chkVisible;
    private javax.swing.JComboBox<String> cmbTilesheet;
    private javax.swing.JLabel imgPreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSpinner spnBlue;
    private javax.swing.JSpinner spnBrightness;
    private javax.swing.JSpinner spnCGroup;
    private javax.swing.JSpinner spnGreen;
    private javax.swing.JSpinner spnHeight;
    private javax.swing.JSpinner spnMass;
    private javax.swing.JSpinner spnOpacity;
    private javax.swing.JSpinner spnRadius;
    private javax.swing.JSpinner spnRed;
    private javax.swing.JSpinner spnTile;
    private javax.swing.JSpinner spnWidth;
    private javax.swing.JTextArea txtCode;
    private javax.swing.JTextField txtCustomTag;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables
}
